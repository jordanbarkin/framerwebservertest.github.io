// Generated by CoffeeScript 1.12.7
(function() {
  var Favorite,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Framer.Extras.Hints.disable();

  Favorite = (function(superClass) {
    extend(Favorite, superClass);

    function Favorite(options) {
      this.clicked = bind(this.clicked, this);
      Favorite.__super__.constructor.call(this, options);
      this.on(Events.Click, this.clicked);
    }

    Favorite.prototype.clicked = function() {
      var j;
      j = ((this.parent.id - 11) / 5) - 1;
      return this.parent.parent.parent.parent.parent.searchForPresses(j);
    };

    return Favorite;

  })(Layer);

  module.exports = (function(superClass) {
    var slideTime;

    extend(exports, superClass);

    slideTime = .3;

    function exports() {
      var allFilter, background, buttons, constraintHeight, constraintWidth, constraints, dashBoardClickOff, dashboardSliding, deviceConstraints, devices, devicesMask, entry, entryParent, entryPhotos, favoriteButton, favoritedIcon, filterSlider, iconList, icons, image, j, k, layerList, len, list, m, motionFilter, parents, positions, redrawList, ref, ringFilter, shiftTime, sideBar, sideBarIcon, sidebarScrollable, whatToDo;
      exports.__super__.constructor.call(this, {
        opacity: 1,
        width: 0,
        height: 0
      });
      sideBar = new Layer({
        width: 540,
        height: 1334,
        parent: this,
        image: "modules/dashboard-images/sidebar main.png"
      });
      this.sideBar = sideBar;
      background = new Layer({
        parent: this,
        width: 750,
        height: 1334,
        image: "modules/dashboard-images/RingApp_Dashboard.png"
      });
      this.background = background;
      list = new ScrollComponent({
        y: 535,
        x: 33,
        parent: this.background,
        width: 682,
        height: 763
      });
      this.list = list;
      this.list.scrollHorizontal = false;
      entryPhotos = ["modules/dashboard-images/2_0000s_0000_Accepted.png", "modules/dashboard-images/2_0000s_0001_Missed.png", "modules/dashboard-images/2_0000s_0003_Motion.png", "modules/dashboard-images/2_0000s_0004_Missed.png", "modules/dashboard-images/2_0000s_0005_Missed.png", "modules/dashboard-images/2_0000s_0006_Accepted.png", "modules/dashboard-images/2_0000s_0007_Missed.png", "modules/dashboard-images/2_0000s_0008_Missed.png", "modules/dashboard-images/2_0000s_0009_Ellipse-1.png", "modules/dashboard-images/2_0000s_0010_Missed.png"];
      layerList = [];
      for (k = 0, len = entryPhotos.length; k < len; k++) {
        entry = entryPhotos[k];
        image = new Layer({
          image: entry,
          width: 747,
          height: 107
        });
        layerList.push(image);
      }
      whatToDo = "open";
      parents = [];
      buttons = [];
      iconList = [];
      constraintWidth = 400;
      constraintHeight = 107;
      for (j = m = 0, ref = layerList.length - 1; 0 <= ref ? m <= ref : m >= ref; j = 0 <= ref ? ++m : --m) {
        entryParent = new Layer({
          favorited: false,
          width: 747,
          identifier: "1",
          image: "modules/dashboard-images/blank.png",
          parent: this.list.content,
          y: j * 107,
          height: 107
        });
        parents.push(entryParent);
        entryParent.favorited = false;
        constraints = new Layer({
          opacity: 0,
          parent: entryParent,
          width: entryParent.width + constraintWidth,
          height: constraintHeight,
          x: -constraintWidth
        });
        icons = new Layer({
          parent: entryParent,
          width: 358,
          image: "modules/dashboard-images/new three icons.png",
          height: constraintHeight,
          x: 324
        });
        icons.states.add({
          on: {
            image: "modules/dashboard-images/new three icons on.png"
          },
          off: {
            image: "modules/dashboard-images/new three icons.png"
          }
        });
        iconList.push(icons);
        favoriteButton = new Favorite({
          superLayer: entryParent,
          width: 105,
          height: 95,
          opacity: 0,
          x: 374
        });
        buttons.push(favoriteButton);
        layerList[j].parent = entryParent;
        favoritedIcon = new Layer({
          parent: layerList[j],
          width: 47,
          height: 47,
          opacity: 0,
          image: "modules/dashboard-images/golden star.png",
          x: 44,
          y: 30
        });
        entryParent.type = entryParent.children[3].image.substring(38, entryParent.children[3].image.indexOf("."));
        layerList[j].onSwipeLeft(function() {
          var i, n, ref1;
          list.scrollVertical = false;
          Utils.delay(slideTime, function() {
            return list.scrollVertical = true;
          });
          for (i = n = 0, ref1 = layerList.length - 1; 0 <= ref1 ? n <= ref1 : n >= ref1; i = 0 <= ref1 ? ++n : --n) {
            layerList[i].animate({
              properties: {
                x: 0
              },
              time: slideTime
            });
          }
          return this.animate({
            properties: {
              x: -1 * constraintWidth
            },
            time: slideTime
          });
        });
        layerList[j].onSwipeRight(function() {
          list.scrollVertical = false;
          Utils.delay(slideTime, function() {
            return list.scrollVertical = true;
          });
          return this.animate({
            properties: {
              x: 0
            },
            time: slideTime
          });
        });
      }
      this.searchForPresses = function(l) {
        buttons[l].parent.favorited = !buttons[l].parent.favorited;
        iconList[l].states.next("on", "off");
        buttons[l].parent.children[3].children[0].opacity = buttons[l].parent.favorited === true ? 1 : 0;
        return layerList[l].animate({
          properties: {
            x: 0
          },
          time: slideTime
        });
      };
      devicesMask = new Layer({
        parent: this.background,
        x: 7,
        y: 145,
        width: 774,
        backgroundColor: "ececec",
        height: 305
      });
      deviceConstraints = new Layer({
        opacity: 0,
        parent: this.background,
        y: 163,
        x: -167,
        height: 287,
        width: 1075
      });
      devices = new Layer({
        image: "modules/dashboard-images/device list.png",
        parent: this.background,
        y: 150,
        width: 892,
        height: 313
      });
      devices.draggable.constraints = deviceConstraints;
      devices.draggable.enabled = true;
      devices.draggable.vertical = false;
      shiftTime = .2;
      positions = new Layer({
        width: 750,
        parent: this.background,
        height: 1334,
        image: "modules/dashboard-images/all_activity.png",
        y: 1
      });
      positions.states.add({
        all: {
          image: "modules/dashboard-images/all_activity.png"
        },
        rings: {
          image: "modules/dashboard-images/rings.png"
        },
        motion: {
          image: "modules/dashboard-images/motion.png"
        }
      });
      ringFilter = new Layer({
        parent: this.background,
        x: 312,
        y: 467,
        height: 68,
        opacity: 0
      });
      motionFilter = new Layer({
        parent: this.background,
        x: 512,
        y: 467,
        height: 68,
        opacity: 0
      });
      allFilter = new Layer({
        parent: this.background,
        x: 61,
        y: 467,
        height: 68,
        opacity: 0,
        width: 264
      });
      ringFilter.onClick(function() {
        var filteredParents;
        filteredParents = parents.filter(function(x) {
          return x.type === "Accepted" || x.type === "Missed";
        });
        redrawList(filteredParents, "rings");
        Utils.delay(.1, function() {
          return positions.states["switch"]("rings");
        });
        return filterSlider.states["switch"]("rings");
      });
      motionFilter.onClick(function() {
        var filteredParents;
        filteredParents = parents.filter(function(x) {
          return x.type === "Motion";
        });
        redrawList(filteredParents, "motion");
        Utils.delay(.1, function() {
          return positions.states["switch"]("motion");
        });
        return filterSlider.states["switch"]("motion");
      });
      allFilter.onClick(function() {
        var filteredParents;
        filteredParents = parents;
        redrawList(filteredParents, "all");
        Utils.delay(.1, function() {
          return positions.states["switch"]("all");
        });
        return filterSlider.states["switch"]("all");
      });
      redrawList = function(input, type) {
        var i, len1, n, o, ref1, ref2, size, startFrom;
        if (filterSlider.states.current !== type) {
          startFrom = 0;
          if (filterSlider.states.current === "all") {
            startFrom = 750;
          } else if (filterSlider.states.current === "motion") {
            startFrom = -750;
          } else {
            startFrom = type === "all" ? -750 : 750;
          }
          this.list2 = list.copy();
          this.list2.animate({
            properties: {
              x: -1 * startFrom
            },
            time: shiftTime
          });
          Utils.delay(shiftTime, function() {
            return this.list2.destroy();
          });
          list.x = startFrom;
          list.animate({
            properties: {
              x: 33
            },
            time: shiftTime
          });
          ref1 = list.content.children;
          for (n = 0, len1 = ref1.length; n < len1; n++) {
            i = ref1[n];
            if (input.indexOf(i) === -1) {
              i.visible = false;
            }
            if (input.indexOf(i) !== -1) {
              i.visible = true;
            }
          }
          for (i = o = 0, ref2 = input.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
            input[i].parent = list.content;
            input[i].y = 107 * i;
          }
          list.scrollToPoint({
            x: 0,
            y: 0
          }, true, {
            time: .5
          });
          size = input.length * 107;
          list.scrollVertical = size < list.height ? false : true;
          return list.updateContent();
        }
      };
      filterSlider = new Layer({
        parent: this.background,
        x: 75,
        y: 529,
        width: 244,
        height: 6,
        backgroundColor: "1998d5"
      });
      filterSlider.states.add({
        all: {
          width: 244,
          x: 75
        },
        rings: {
          x: 339,
          width: 151
        },
        motion: {
          x: 504,
          width: 165
        }
      });
      filterSlider.states.animationOptions = {
        time: .4
      };
      sideBarIcon = new Layer({
        width: 124,
        height: 121,
        opacity: 0,
        parent: this.background
      });
      this.sideBarIcon = sideBarIcon;
      this.sideBarIcon.onClick(function() {
        return dashboardSliding();
      });
      dashBoardClickOff = new Layer({
        width: 207,
        height: 1334,
        opacity: 0,
        parent: this.background,
        visible: false
      });
      this.dashBoardClickOff = dashBoardClickOff;
      dashboardSliding = function() {
        if (background.x === 0) {
          background.animate({
            properties: {
              x: 540
            },
            time: .3
          });
          dashBoardClickOff.visible = true;
          return devices.animate({
            properties: {
              x: 0
            },
            time: .1
          });
        } else {
          background.animate({
            properties: {
              x: 0
            },
            time: .3
          });
          return dashBoardClickOff.visible = false;
        }
      };
      Screen.onEdgeSwipeLeft(function() {
        if (background.x === 0) {
          return dashboardSliding();
        }
      });
      this.dashBoardClickOff.onClick(function() {
        return dashboardSliding();
      });
      sidebarScrollable = new ScrollComponent({
        parent: this.sideBar,
        y: 176,
        height: 1158,
        width: 540
      });
      sidebarScrollable.onSwipeLeft(function() {
        return dashboardSliding();
      });
      sidebarScrollable.content.image = "modules/dashboard-images/scrollable_sidebar.png";
      sidebarScrollable.scrollHorizontal = false;
    }

    return exports;

  })(Layer);

}).call(this);
