// Generated by CoffeeScript 1.12.7
(function() {
  var growthRatio, imageHeight,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports.keyboardLayer = new Layer({
    x: 0,
    y: Screen.height,
    width: Screen.width,
    height: 432,
    html: "<img style='width: 100%;' src='modules/keyboard.png'/>"
  });

  growthRatio = Screen.width / 732;

  imageHeight = growthRatio * 432;

  exports.keyboardLayer.states = {
    shown: {
      y: Screen.height - imageHeight
    }
  };

  exports.keyboardLayer.states.animationOptions = {
    curve: "spring(500,50,15)"
  };

  exports.Input = (function(superClass) {
    extend(Input, superClass);

    Input.define("style", {
      get: function() {
        return this.input.style;
      },
      set: function(value) {
        return _.extend(this.input.style, value);
      }
    });

    Input.define("value", {
      get: function() {
        return this.input.value;
      },
      set: function(value) {
        return this.input.value = value;
      }
    });

    function Input(options) {
      if (options == null) {
        options = {};
      }
      if (options.setup == null) {
        options.setup = false;
      }
      if (options.width == null) {
        options.width = Screen.width;
      }
      if (options.clip == null) {
        options.clip = false;
      }
      if (options.height == null) {
        options.height = 60;
      }
      if (options.backgroundColor == null) {
        options.backgroundColor = options.setup ? "rgba(255, 60, 47, .5)" : "transparent";
      }
      if (options.fontSize == null) {
        options.fontSize = 30;
      }
      if (options.lineHeight == null) {
        options.lineHeight = 30;
      }
      if (options.padding == null) {
        options.padding = 10;
      }
      if (options.text == null) {
        options.text = "";
      }
      if (options.placeholder == null) {
        options.placeholder = "";
      }
      if (options.virtualKeyboard == null) {
        options.virtualKeyboard = Utils.isMobile() ? false : true;
      }
      if (options.type == null) {
        options.type = "text";
      }
      if (options.goButton == null) {
        options.goButton = false;
      }
      if (options.autoCorrect == null) {
        options.autoCorrect = "on";
      }
      if (options.autoComplete == null) {
        options.autoComplete = "on";
      }
      if (options.autoCapitalize == null) {
        options.autoCapitalize = "on";
      }
      if (options.spellCheck == null) {
        options.spellCheck = "on";
      }
      if (options.autofocus == null) {
        options.autofocus = false;
      }
      Input.__super__.constructor.call(this, options);
      if (options.placeholderColor != null) {
        this.placeholderColor = options.placeholderColor;
      }
      this.input = document.createElement("input");
      this.input.id = "input-" + (_.now());
      this.input.style.cssText = "outline: none; font-size: " + options.fontSize + "px; line-height: " + options.lineHeight + "px; padding: " + options.padding + "px; width: " + options.width + "px; height: " + options.height + "px; border: none; background-image: url(about:blank); background-color: " + options.backgroundColor + ";";
      this.input.value = options.text;
      this.input.type = options.type;
      this.input.placeholder = options.placeholder;
      this.input.setAttribute("autocorrect", options.autoCorrect);
      this.input.setAttribute("autocomplete", options.autoComplete);
      this.input.setAttribute("autocapitalize", options.autoCapitalize);
      if (options.autofocus === true) {
        this.input.setAttribute("autofocus", true);
      }
      this.input.setAttribute("spellcheck", options.spellCheck);
      this.form = document.createElement("form");
      if (options.goButton) {
        this.form.action = "#";
        this.form.addEventListener("submit", function(event) {
          return event.preventDefault();
        });
      }
      this.form.appendChild(this.input);
      this._element.appendChild(this.form);
      this.backgroundColor = "transparent";
      if (this.placeholderColor) {
        this.updatePlaceholderColor(options.placeholderColor);
      }
      if (!Utils.isMobile() && options.virtualKeyboard === true) {
        this.input.addEventListener("focus", function() {
          exports.keyboardLayer.bringToFront();
          return exports.keyboardLayer.stateCycle();
        });
        this.input.addEventListener("blur", function() {
          return exports.keyboardLayer.animate("default");
        });
      }
    }

    Input.prototype.updatePlaceholderColor = function(color) {
      var css;
      this.placeholderColor = color;
      if (this.pageStyle != null) {
        document.head.removeChild(this.pageStyle);
      }
      this.pageStyle = document.createElement("style");
      this.pageStyle.type = "text/css";
      css = "#" + this.input.id + "::-webkit-input-placeholder { color: " + this.placeholderColor + "; }";
      this.pageStyle.appendChild(document.createTextNode(css));
      return document.head.appendChild(this.pageStyle);
    };

    Input.prototype.focus = function() {
      return this.input.focus();
    };

    Input.prototype.onFocus = function(cb) {
      return this.input.addEventListener("focus", function() {
        return cb.apply(this);
      });
    };

    Input.prototype.onBlur = function(cb) {
      return this.input.addEventListener("blur", function() {
        return cb.apply(this);
      });
    };

    return Input;

  })(Layer);

}).call(this);
